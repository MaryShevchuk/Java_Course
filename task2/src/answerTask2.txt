Какие бывают классы в Java?

Вложенные внутренние классы – нестатические классы внутри внешнего класса.
Вложенные статические классы – статические классы внутри внешнего класса.
Локальные классы Java – классы внутри методов.
Абстрактные Java классы – это  абстрактный, приблизительный «шаблон» для группы будущих классов.


В чем отличие интерфейса от абстрактного класса?
Абстрактный класс — это «шаблон» будущих классов: у него реализовано большинство методов (+ внутренние), кроме нескольких (один и больше)
Интерфейс такой же абстрактный класс,но в нем не может быть свойств и не определены тела у методов (реализация методов запрещена, только можно объявить методы).
Получается, что:
1) Интерфейс только описывает поведение, а абстрактный класс описывает состояния (но и поведение тоже)
2) Интерфейсы обладают меньшей связностью, т.к. не обладают конкретным поведением ( могут моделировать отношение, но могут определять и менее жесткое отношение)
3) Классы могут реализовывать сколько угодно интерфейсов, но наследоваться можно только от одного класса.
(интерфейс связывает между собой множество разных классов, у которых часто нет ничего общего, а абстрактный класс создается для группы очень близких друг другу классов.)


Какие модификаторы доступа есть в Java и когда какой применяется?
Модификаторы доступа нужны, чтобы задать уровни доступа для классов, переменных, методов и конструкторов.
В Java используются следующие модификаторы доступа:
1) public: публичный, общедоступный класс или член класса.
видны другим классам из текущего пакета и из внешних пакетов.

2) private: закрытый класс или член класса, противоположность модификатору public.
доступен только из кода в том же классе (но класс и интерфейсы не могут быть private).

3) protected:
доступен из любого места в текущем классе или пакете или в производных классах, даже если они находятся в других пакетах

4) default: модификатор по умолчанию.
Отсутствие модификатора у поля или метода класса предполагает применение к нему модификатора по умолчанию.
Такие поля или методы видны всем классам в текущем пакете.



Возможно ли множественное наследование в Java?
Нет, Java не поддерживает множественное наследование.
Есть другие различные способы наследования:
1) Одиночное наследование public class A { ... }
                          public class B extends A { ... }

2) Многоуровневое наследование  public class A { ... }
                                public class B extends A { ... }
                                public class C extends B { ... }

3) Иерархическое наследование public class A { ... }
                              public class B extends A { ... }
                              public class C extends A { ... }

